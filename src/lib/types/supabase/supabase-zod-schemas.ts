// Generated by ts-to-zod
import { z } from 'zod';
import type { Json } from './database.types';

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
	z
		.union([
			z.string(),
			z.number(),
			z.boolean(),
			z.record(z.union([jsonSchema, z.undefined()])),
			z.array(jsonSchema)
		])
		.nullable()
);

export const adUserRowSchema = z.object({
	auth_user_id: z.string().nullable(),
	avatar_url: z.string().nullable(),
	c_bpartner_id: z.number().nullable(),
	created_at: z.string(),
	email: z.string().nullable(),
	full_name: z.string().nullable(),
	id: z.number(),
	is_active: z.boolean(),
	supervisor_id: z.number().nullable(),
	updated_at: z.string(),
	username: z.string().nullable()
});

export const adUserInsertSchema = z.object({
	auth_user_id: z.string().optional().nullable(),
	avatar_url: z.string().optional().nullable(),
	c_bpartner_id: z.number().optional().nullable(),
	created_at: z.string().optional(),
	email: z.string().optional().nullable(),
	full_name: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	supervisor_id: z.number().optional().nullable(),
	updated_at: z.string().optional(),
	username: z.string().optional().nullable()
});

export const adUserUpdateSchema = z.object({
	auth_user_id: z.string().optional().nullable(),
	avatar_url: z.string().optional().nullable(),
	c_bpartner_id: z.number().optional().nullable(),
	created_at: z.string().optional(),
	email: z.string().optional().nullable(),
	full_name: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	supervisor_id: z.number().optional().nullable(),
	updated_at: z.string().optional(),
	username: z.string().optional().nullable()
});

export const adUserRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('ad_user_c_bpartner_id_fkey'),
		columns: z.tuple([z.literal('c_bpartner_id')]),
		referencedRelation: z.literal('c_bpartner'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('ad_user_supervisor_id_fkey'),
		columns: z.tuple([z.literal('supervisor_id')]),
		referencedRelation: z.literal('ad_user'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const assetRowSchema = z.object({
	created_at: z.string(),
	id: z.number(),
	mimeType: z.string().nullable(),
	name: z.string(),
	source: z.string(),
	type: z.string().nullable(),
	updated_at: z.string()
});

export const assetInsertSchema = z.object({
	created_at: z.string().optional(),
	id: z.number().optional(),
	mimeType: z.string().optional().nullable(),
	name: z.string(),
	source: z.string(),
	type: z.string().optional().nullable(),
	updated_at: z.string().optional()
});

export const assetUpdateSchema = z.object({
	created_at: z.string().optional(),
	id: z.number().optional(),
	mimeType: z.string().optional().nullable(),
	name: z.string().optional(),
	source: z.string().optional(),
	type: z.string().optional().nullable(),
	updated_at: z.string().optional()
});

export const assetRelationshipsSchema = z.tuple([]);

export const cBpartnerRowSchema = z.object({
	ad_language: z.string().nullable(),
	bpartner_parent_id: z.number().nullable(),
	created_at: z.string(),
	duns: z.string().nullable(),
	id: z.number(),
	is_active: z.boolean(),
	iscustomer: z.boolean(),
	isemployee: z.boolean(),
	issalesrep: z.boolean(),
	isvendor: z.boolean(),
	m_pricelist_id: z.number().nullable(),
	name: z.string(),
	po_pricelist_id: z.number().nullable(),
	taxid: z.string().nullable(),
	updated_at: z.string(),
	value: z.string().nullable()
});

export const cBpartnerInsertSchema = z.object({
	ad_language: z.string().optional().nullable(),
	bpartner_parent_id: z.number().optional().nullable(),
	created_at: z.string().optional(),
	duns: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	iscustomer: z.boolean().optional(),
	isemployee: z.boolean().optional(),
	issalesrep: z.boolean().optional(),
	isvendor: z.boolean().optional(),
	m_pricelist_id: z.number().optional().nullable(),
	name: z.string(),
	po_pricelist_id: z.number().optional().nullable(),
	taxid: z.string().optional().nullable(),
	updated_at: z.string().optional(),
	value: z.string().optional().nullable()
});

export const cBpartnerUpdateSchema = z.object({
	ad_language: z.string().optional().nullable(),
	bpartner_parent_id: z.number().optional().nullable(),
	created_at: z.string().optional(),
	duns: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	iscustomer: z.boolean().optional(),
	isemployee: z.boolean().optional(),
	issalesrep: z.boolean().optional(),
	isvendor: z.boolean().optional(),
	m_pricelist_id: z.number().optional().nullable(),
	name: z.string().optional(),
	po_pricelist_id: z.number().optional().nullable(),
	taxid: z.string().optional().nullable(),
	updated_at: z.string().optional(),
	value: z.string().optional().nullable()
});

export const cBpartnerRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('c_bpartner_bpartner_parent_id_fkey'),
		columns: z.tuple([z.literal('bpartner_parent_id')]),
		referencedRelation: z.literal('c_bpartner'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('c_bpartner_m_pricelist_id_fkey'),
		columns: z.tuple([z.literal('m_pricelist_id')]),
		referencedRelation: z.literal('m_pricelist'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('c_bpartner_po_pricelist_id_fkey'),
		columns: z.tuple([z.literal('po_pricelist_id')]),
		referencedRelation: z.literal('m_pricelist'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const cBpartnerLocationRowSchema = z.object({
	c_bpartner_id: z.number(),
	created_at: z.string(),
	id: z.number(),
	is_active: z.boolean(),
	isbillto: z.boolean(),
	isshipto: z.boolean(),
	name: z.string(),
	phone: z.string().nullable(),
	phone2: z.string().nullable(),
	updated_at: z.string()
});

export const cBpartnerLocationInsertSchema = z.object({
	c_bpartner_id: z.number(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	isbillto: z.boolean().optional(),
	isshipto: z.boolean().optional(),
	name: z.string().optional(),
	phone: z.string().optional().nullable(),
	phone2: z.string().optional().nullable(),
	updated_at: z.string().optional()
});

export const cBpartnerLocationUpdateSchema = z.object({
	c_bpartner_id: z.number().optional(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	isbillto: z.boolean().optional(),
	isshipto: z.boolean().optional(),
	name: z.string().optional(),
	phone: z.string().optional().nullable(),
	phone2: z.string().optional().nullable(),
	updated_at: z.string().optional()
});

export const cBpartnerLocationRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('c_bpartner_location_c_bpartner_id_fkey'),
		columns: z.tuple([z.literal('c_bpartner_id')]),
		referencedRelation: z.literal('c_bpartner'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const cChannelRowSchema = z.object({
	c_channel_uu: z.string().nullable(),
	created_at: z.string(),
	description: z.string().nullable(),
	id: z.number(),
	is_active: z.boolean(),
	name: z.string(),
	updated_at: z.string()
});

export const cChannelInsertSchema = z.object({
	c_channel_uu: z.string().optional().nullable(),
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	name: z.string(),
	updated_at: z.string().optional()
});

export const cChannelUpdateSchema = z.object({
	c_channel_uu: z.string().optional().nullable(),
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	name: z.string().optional(),
	updated_at: z.string().optional()
});

export const cChannelRelationshipsSchema = z.tuple([]);

export const entitySchema = z.union([
	z.literal('Category'),
	z.literal('Source'),
	z.literal('Uom'),
	z.literal('Tax')
]);

export const cChannelMapInsertSchema = z.object({
	c_channel_id: z.number(),
	channel_code: z.string(),
	created_at: z.string().optional(),
	entity_type: entitySchema.optional(),
	id: z.number().optional(),
	internal_code: z.string(),
	is_active: z.boolean().optional(),
	updated_at: z.string().optional()
});

export const cChannelMapUpdateSchema = z.object({
	c_channel_id: z.number().optional(),
	channel_code: z.string().optional(),
	created_at: z.string().optional(),
	entity_type: entitySchema.optional(),
	id: z.number().optional(),
	internal_code: z.string().optional(),
	is_active: z.boolean().optional(),
	updated_at: z.string().optional()
});

export const cChannelMapRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('c_channel_map_c_channel_id_fkey'),
		columns: z.tuple([z.literal('c_channel_id')]),
		referencedRelation: z.literal('c_channel'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const cChannelMapBpartnerRowSchema = z.object({
	c_bpartner_id: z.number(),
	c_channel_id: z.number(),
	created_at: z.string(),
	id: z.number(),
	is_active: z.boolean(),
	resource_id: z.string(),
	updated_at: z.string()
});

export const cChannelMapBpartnerInsertSchema = z.object({
	c_bpartner_id: z.number(),
	c_channel_id: z.number(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	resource_id: z.string(),
	updated_at: z.string().optional()
});

export const cChannelMapBpartnerUpdateSchema = z.object({
	c_bpartner_id: z.number().optional(),
	c_channel_id: z.number().optional(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	resource_id: z.string().optional(),
	updated_at: z.string().optional()
});

export const cChannelMapBpartnerRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('c_channel_map_bpartner_c_bpartner_id_fkey'),
		columns: z.tuple([z.literal('c_bpartner_id')]),
		referencedRelation: z.literal('c_bpartner'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('c_channel_map_bpartner_c_channel_id_fkey'),
		columns: z.tuple([z.literal('c_channel_id')]),
		referencedRelation: z.literal('c_channel'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const cChannelMapCategoryRowSchema = z.object({
	c_channel_id: z.number(),
	created_at: z.string(),
	id: z.number(),
	is_active: z.boolean(),
	m_product_category_id: z.number().nullable(),
	resource_id: z.string(),
	resource_name: z.string(),
	updated_at: z.string()
});

export const cChannelMapCategoryInsertSchema = z.object({
	c_channel_id: z.number(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	m_product_category_id: z.number().optional().nullable(),
	resource_id: z.string(),
	resource_name: z.string(),
	updated_at: z.string().optional()
});

export const cChannelMapCategoryUpdateSchema = z.object({
	c_channel_id: z.number().optional(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	m_product_category_id: z.number().optional().nullable(),
	resource_id: z.string().optional(),
	resource_name: z.string().optional(),
	updated_at: z.string().optional()
});

export const cChannelMapCategoryRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('c_channel_map_category_c_channel_id_fkey'),
		columns: z.tuple([z.literal('c_channel_id')]),
		referencedRelation: z.literal('c_channel'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('c_channel_map_category_m_product_category_id_fkey'),
		columns: z.tuple([z.literal('m_product_category_id')]),
		referencedRelation: z.literal('m_product_category'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const cChannelMapTaxRowSchema = z.object({
	c_channel_id: z.number(),
	c_taxcategory_id: z.number(),
	created_at: z.string(),
	id: z.number(),
	is_active: z.boolean(),
	resource_id: z.string(),
	updated_at: z.string()
});

export const cChannelMapTaxInsertSchema = z.object({
	c_channel_id: z.number(),
	c_taxcategory_id: z.number(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	resource_id: z.string(),
	updated_at: z.string().optional()
});

export const cChannelMapTaxUpdateSchema = z.object({
	c_channel_id: z.number().optional(),
	c_taxcategory_id: z.number().optional(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	resource_id: z.string().optional(),
	updated_at: z.string().optional()
});

export const cChannelMapTaxRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('c_channel_map_tax_c_channel_id_fkey'),
		columns: z.tuple([z.literal('c_channel_id')]),
		referencedRelation: z.literal('c_channel'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('c_channel_map_tax_c_taxcategory_id_fkey'),
		columns: z.tuple([z.literal('c_taxcategory_id')]),
		referencedRelation: z.literal('c_taxcategory'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const cChannelMapWarehouseRowSchema = z.object({
	c_channel_id: z.number(),
	created_at: z.string(),
	id: z.number(),
	is_active: z.boolean(),
	m_warehouse_id: z.number(),
	resource_id: z.string(),
	updated_at: z.string()
});

export const cChannelMapWarehouseInsertSchema = z.object({
	c_channel_id: z.number(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	m_warehouse_id: z.number(),
	resource_id: z.string(),
	updated_at: z.string().optional()
});

export const cChannelMapWarehouseUpdateSchema = z.object({
	c_channel_id: z.number().optional(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	m_warehouse_id: z.number().optional(),
	resource_id: z.string().optional(),
	updated_at: z.string().optional()
});

export const cChannelMapWarehouseRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('c_channel_map_warehouse_c_channel_id_fkey'),
		columns: z.tuple([z.literal('c_channel_id')]),
		referencedRelation: z.literal('c_channel'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('c_channel_map_warehouse_m_warehouse_id_fkey'),
		columns: z.tuple([z.literal('m_warehouse_id')]),
		referencedRelation: z.literal('m_warehouse'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const cCountryRowSchema = z.object({
	alpha_2: z.string(),
	c_currency_id: z.number().nullable(),
	created_at: z.string(),
	full_name: z.string().nullable(),
	id: z.number(),
	is_active: z.boolean(),
	short_name: z.string(),
	updated_at: z.string()
});

export const cCountryInsertSchema = z.object({
	alpha_2: z.string(),
	c_currency_id: z.number().optional().nullable(),
	created_at: z.string().optional(),
	full_name: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	short_name: z.string(),
	updated_at: z.string().optional()
});

export const cCountryUpdateSchema = z.object({
	alpha_2: z.string().optional(),
	c_currency_id: z.number().optional().nullable(),
	created_at: z.string().optional(),
	full_name: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	short_name: z.string().optional(),
	updated_at: z.string().optional()
});

export const cCountryRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('c_country_c_currency_id_fkey'),
		columns: z.tuple([z.literal('c_currency_id')]),
		referencedRelation: z.literal('c_currency'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const cCurrencyRowSchema = z.object({
	alphabetic_code: z.string(),
	created_at: z.string(),
	cursymbol: z.string().nullable(),
	id: z.number(),
	is_enabled: z.boolean(),
	minor_unit: z.number(),
	name: z.string(),
	numeric_code: z.string(),
	updated_at: z.string()
});

export const cCurrencyInsertSchema = z.object({
	alphabetic_code: z.string(),
	created_at: z.string().optional(),
	cursymbol: z.string().optional().nullable(),
	id: z.number().optional(),
	is_enabled: z.boolean().optional(),
	minor_unit: z.number().optional(),
	name: z.string(),
	numeric_code: z.string(),
	updated_at: z.string().optional()
});

export const cCurrencyUpdateSchema = z.object({
	alphabetic_code: z.string().optional(),
	created_at: z.string().optional(),
	cursymbol: z.string().optional().nullable(),
	id: z.number().optional(),
	is_enabled: z.boolean().optional(),
	minor_unit: z.number().optional(),
	name: z.string().optional(),
	numeric_code: z.string().optional(),
	updated_at: z.string().optional()
});

export const cCurrencyRelationshipsSchema = z.tuple([]);

export const cPostalCodeRowSchema = z.object({
	c_country_id: z.number(),
	code: z.string(),
	created_at: z.string(),
	id: z.number(),
	is_active: z.boolean(),
	updated_at: z.string()
});

export const cPostalCodeInsertSchema = z.object({
	c_country_id: z.number(),
	code: z.string(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	updated_at: z.string().optional()
});

export const cPostalCodeUpdateSchema = z.object({
	c_country_id: z.number().optional(),
	code: z.string().optional(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	updated_at: z.string().optional()
});

export const cPostalCodeRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('c_postal_code_c_country_id_fkey'),
		columns: z.tuple([z.literal('c_country_id')]),
		referencedRelation: z.literal('c_country'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const cTaxRowSchema = z.object({
	c_taxcategory_id: z.number(),
	created_at: z.string(),
	description: z.string().nullable(),
	id: z.number(),
	is_active: z.boolean(),
	isdefault: z.boolean(),
	name: z.string(),
	rate: z.number(),
	updated_at: z.string()
});

export const cTaxInsertSchema = z.object({
	c_taxcategory_id: z.number(),
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	isdefault: z.boolean().optional(),
	name: z.string(),
	rate: z.number(),
	updated_at: z.string().optional()
});

export const cTaxUpdateSchema = z.object({
	c_taxcategory_id: z.number().optional(),
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	isdefault: z.boolean().optional(),
	name: z.string().optional(),
	rate: z.number().optional(),
	updated_at: z.string().optional()
});

export const cTaxRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('c_tax_c_taxcategory_id_fkey'),
		columns: z.tuple([z.literal('c_taxcategory_id')]),
		referencedRelation: z.literal('c_taxcategory'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const cTaxcategoryRowSchema = z.object({
	created_at: z.string(),
	description: z.string().nullable(),
	id: z.number(),
	is_active: z.boolean(),
	is_default: z.boolean(),
	name: z.string(),
	updated_at: z.string()
});

export const cTaxcategoryInsertSchema = z.object({
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	is_default: z.boolean().optional(),
	name: z.string(),
	updated_at: z.string().optional()
});

export const cTaxcategoryUpdateSchema = z.object({
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	is_default: z.boolean().optional(),
	name: z.string().optional(),
	updated_at: z.string().optional()
});

export const cTaxcategoryRelationshipsSchema = z.tuple([]);

export const cUomRowSchema = z.object({
	created_at: z.string(),
	description: z.string().nullable(),
	id: z.number(),
	is_active: z.boolean(),
	is_default: z.boolean(),
	name: z.string(),
	stdprecision: z.number(),
	uomsymbol: z.string().nullable(),
	updated_at: z.string()
});

export const cUomInsertSchema = z.object({
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	is_default: z.boolean().optional(),
	name: z.string(),
	stdprecision: z.number(),
	uomsymbol: z.string().optional().nullable(),
	updated_at: z.string().optional()
});

export const cUomUpdateSchema = z.object({
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	is_default: z.boolean().optional(),
	name: z.string().optional(),
	stdprecision: z.number().optional(),
	uomsymbol: z.string().optional().nullable(),
	updated_at: z.string().optional()
});

export const cUomRelationshipsSchema = z.tuple([]);

export const cUomConversionRowSchema = z.object({
	c_uom_id: z.number().nullable(),
	c_uom_to_id: z.number().nullable(),
	created_at: z.string(),
	dividerate: z.number().nullable(),
	id: z.number(),
	is_active: z.boolean().nullable(),
	m_product_id: z.number().nullable(),
	multiplyrate: z.number().nullable(),
	updated_at: z.string().nullable()
});

export const cUomConversionInsertSchema = z.object({
	c_uom_id: z.number().optional().nullable(),
	c_uom_to_id: z.number().optional().nullable(),
	created_at: z.string().optional(),
	dividerate: z.number().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional().nullable(),
	m_product_id: z.number().optional().nullable(),
	multiplyrate: z.number().optional().nullable(),
	updated_at: z.string().optional().nullable()
});

export const cUomConversionUpdateSchema = z.object({
	c_uom_id: z.number().optional().nullable(),
	c_uom_to_id: z.number().optional().nullable(),
	created_at: z.string().optional(),
	dividerate: z.number().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional().nullable(),
	m_product_id: z.number().optional().nullable(),
	multiplyrate: z.number().optional().nullable(),
	updated_at: z.string().optional().nullable()
});

export const cUomConversionRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('c_uom_conversion_c_uom_id_fkey'),
		columns: z.tuple([z.literal('c_uom_id')]),
		referencedRelation: z.literal('c_uom'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('c_uom_conversion_c_uom_to_id_fkey'),
		columns: z.tuple([z.literal('c_uom_to_id')]),
		referencedRelation: z.literal('c_uom'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('c_uom_conversion_m_product_id_fkey'),
		columns: z.tuple([z.literal('m_product_id')]),
		referencedRelation: z.literal('m_product'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const continentsSchema = z.union([
	z.literal('Africa'),
	z.literal('Antarctica'),
	z.literal('Asia'),
	z.literal('Europe'),
	z.literal('Oceania'),
	z.literal('North America'),
	z.literal('South America')
]);

export const countriesInsertSchema = z.object({
	continent: continentsSchema.optional().nullable(),
	id: z.number().optional(),
	iso2: z.string(),
	iso3: z.string().optional().nullable(),
	local_name: z.string().optional().nullable(),
	name: z.string().optional().nullable()
});

export const countriesUpdateSchema = z.object({
	continent: continentsSchema.optional().nullable(),
	id: z.number().optional(),
	iso2: z.string().optional(),
	iso3: z.string().optional().nullable(),
	local_name: z.string().optional().nullable(),
	name: z.string().optional().nullable()
});

export const countriesRelationshipsSchema = z.tuple([]);

export const attributeTypeSchema = z.union([
	z.literal('single_select'),
	z.literal('multi_select'),
	z.literal('text'),
	z.literal('number'),
	z.literal('boolean'),
	z.literal('date')
]);

export const mAttributeInsertSchema = z.object({
	attribute_group_id: z.number().optional(),
	attribute_type: attributeTypeSchema,
	code: z.string(),
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	name: z.string(),
	updated_at: z.string().optional()
});

export const mAttributeUpdateSchema = z.object({
	attribute_group_id: z.number().optional(),
	attribute_type: attributeTypeSchema.optional(),
	code: z.string().optional(),
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	name: z.string().optional(),
	updated_at: z.string().optional()
});

export const mAttributeRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('m_attribute_attribute_group_id_fkey'),
		columns: z.tuple([z.literal('attribute_group_id')]),
		referencedRelation: z.literal('m_attribute_group'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const mAttributeGroupRowSchema = z.object({
	code: z.string(),
	created_at: z.string(),
	id: z.number(),
	is_active: z.boolean().nullable(),
	name: z.string(),
	updated_at: z.string()
});

export const mAttributeGroupInsertSchema = z.object({
	code: z.string(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional().nullable(),
	name: z.string(),
	updated_at: z.string().optional()
});

export const mAttributeGroupUpdateSchema = z.object({
	code: z.string().optional(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional().nullable(),
	name: z.string().optional(),
	updated_at: z.string().optional()
});

export const mAttributeGroupRelationshipsSchema = z.tuple([]);

export const mAttributeOptionRowSchema = z.object({
	attribute_id: z.number(),
	code: z.string(),
	created_at: z.string().nullable(),
	id: z.number(),
	is_active: z.boolean().nullable(),
	name: z.string(),
	sort_order: z.number().nullable(),
	updated_at: z.string().nullable()
});

export const mAttributeOptionInsertSchema = z.object({
	attribute_id: z.number(),
	code: z.string(),
	created_at: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional().nullable(),
	name: z.string(),
	sort_order: z.number().optional().nullable(),
	updated_at: z.string().optional().nullable()
});

export const mAttributeOptionUpdateSchema = z.object({
	attribute_id: z.number().optional(),
	code: z.string().optional(),
	created_at: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional().nullable(),
	name: z.string().optional(),
	sort_order: z.number().optional().nullable(),
	updated_at: z.string().optional().nullable()
});

export const mAttributeOptionRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('m_attribute_option_attribute_id_fkey'),
		columns: z.tuple([z.literal('attribute_id')]),
		referencedRelation: z.literal('m_attribute'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const mAttributesetRowSchema = z.object({
	code: z.string(),
	created_at: z.string(),
	description: z.string().nullable(),
	id: z.number(),
	is_active: z.boolean(),
	name: z.string(),
	updated_at: z.string()
});

export const mAttributesetInsertSchema = z.object({
	code: z.string(),
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	name: z.string(),
	updated_at: z.string().optional()
});

export const mAttributesetUpdateSchema = z.object({
	code: z.string().optional(),
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	name: z.string().optional(),
	updated_at: z.string().optional()
});

export const mAttributesetRelationshipsSchema = z.tuple([]);

export const mAttributesetAttributeRowSchema = z.object({
	attribute_id: z.number(),
	attributeset_id: z.number(),
	created_at: z.string(),
	id: z.number(),
	is_active: z.boolean(),
	is_required: z.boolean(),
	sequence: z.number().nullable(),
	updated_at: z.string()
});

export const mAttributesetAttributeInsertSchema = z.object({
	attribute_id: z.number(),
	attributeset_id: z.number(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	is_required: z.boolean().optional(),
	sequence: z.number().optional().nullable(),
	updated_at: z.string().optional()
});

export const mAttributesetAttributeUpdateSchema = z.object({
	attribute_id: z.number().optional(),
	attributeset_id: z.number().optional(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	is_required: z.boolean().optional(),
	sequence: z.number().optional().nullable(),
	updated_at: z.string().optional()
});

export const mAttributesetAttributeRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('m_attributeset_attribute_attribute_id_fkey'),
		columns: z.tuple([z.literal('attribute_id')]),
		referencedRelation: z.literal('m_attribute'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_attributeset_attribute_attributeset_id_fkey'),
		columns: z.tuple([z.literal('attributeset_id')]),
		referencedRelation: z.literal('m_attributeset'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const mDiscountschemaRowSchema = z.object({
	created_at: z.string(),
	flatdiscount: z.number().nullable(),
	id: z.number(),
	is_active: z.boolean(),
	name: z.string(),
	updated_at: z.string(),
	validfrom: z.string().nullable()
});

export const mDiscountschemaInsertSchema = z.object({
	created_at: z.string().optional(),
	flatdiscount: z.number().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	name: z.string(),
	updated_at: z.string().optional(),
	validfrom: z.string().optional().nullable()
});

export const mDiscountschemaUpdateSchema = z.object({
	created_at: z.string().optional(),
	flatdiscount: z.number().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	name: z.string().optional(),
	updated_at: z.string().optional(),
	validfrom: z.string().optional().nullable()
});

export const mDiscountschemaRelationshipsSchema = z.tuple([]);

export const mLocatorRowSchema = z.object({
	created_at: z.string(),
	id: z.number(),
	is_active: z.boolean(),
	is_default: z.boolean(),
	m_warehouse_id: z.number(),
	updated_at: z.string(),
	value: z.string(),
	x: z.string().nullable(),
	y: z.string().nullable(),
	z: z.string().nullable()
});

export const mLocatorInsertSchema = z.object({
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	is_default: z.boolean().optional(),
	m_warehouse_id: z.number(),
	updated_at: z.string().optional(),
	value: z.string(),
	x: z.string().optional().nullable(),
	y: z.string().optional().nullable(),
	z: z.string().optional().nullable()
});

export const mLocatorUpdateSchema = z.object({
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	is_default: z.boolean().optional(),
	m_warehouse_id: z.number().optional(),
	updated_at: z.string().optional(),
	value: z.string().optional(),
	x: z.string().optional().nullable(),
	y: z.string().optional().nullable(),
	z: z.string().optional().nullable()
});

export const mLocatorRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('m_locator_m_warehouse_id_fkey'),
		columns: z.tuple([z.literal('m_warehouse_id')]),
		referencedRelation: z.literal('m_warehouse'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const mPricelistRowSchema = z.object({
	basepricelist_id: z.number().nullable(),
	c_currency_id: z.number(),
	created_at: z.string(),
	description: z.string().nullable(),
	enforcepricelimit: z.boolean(),
	id: z.number(),
	is_active: z.boolean(),
	is_default: z.boolean(),
	is_taxincluded: z.boolean().nullable(),
	issopricelist: z.boolean(),
	name: z.string(),
	priceprecision: z.number(),
	updated_at: z.string()
});

export const mPricelistInsertSchema = z.object({
	basepricelist_id: z.number().optional().nullable(),
	c_currency_id: z.number(),
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	enforcepricelimit: z.boolean().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	is_default: z.boolean().optional(),
	is_taxincluded: z.boolean().optional().nullable(),
	issopricelist: z.boolean().optional(),
	name: z.string(),
	priceprecision: z.number().optional(),
	updated_at: z.string().optional()
});

export const mPricelistUpdateSchema = z.object({
	basepricelist_id: z.number().optional().nullable(),
	c_currency_id: z.number().optional(),
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	enforcepricelimit: z.boolean().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	is_default: z.boolean().optional(),
	is_taxincluded: z.boolean().optional().nullable(),
	issopricelist: z.boolean().optional(),
	name: z.string().optional(),
	priceprecision: z.number().optional(),
	updated_at: z.string().optional()
});

export const mPricelistRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('m_pricelist_basepricelist_id_fkey'),
		columns: z.tuple([z.literal('basepricelist_id')]),
		referencedRelation: z.literal('m_pricelist'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_pricelist_c_currency_id_fkey'),
		columns: z.tuple([z.literal('c_currency_id')]),
		referencedRelation: z.literal('c_currency'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const mPricelistVersionRowSchema = z.object({
	created_at: z.string(),
	description: z.string().nullable(),
	id: z.number(),
	is_active: z.boolean(),
	m_discountschema_id: z.number(),
	m_pricelist_id: z.number(),
	m_pricelist_version_base_id: z.number().nullable(),
	name: z.string(),
	updated_at: z.string(),
	validfrom: z.string(),
	validto: z.string().nullable()
});

export const mPricelistVersionInsertSchema = z.object({
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	m_discountschema_id: z.number(),
	m_pricelist_id: z.number(),
	m_pricelist_version_base_id: z.number().optional().nullable(),
	name: z.string(),
	updated_at: z.string().optional(),
	validfrom: z.string(),
	validto: z.string().optional().nullable()
});

export const mPricelistVersionUpdateSchema = z.object({
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	m_discountschema_id: z.number().optional(),
	m_pricelist_id: z.number().optional(),
	m_pricelist_version_base_id: z.number().optional().nullable(),
	name: z.string().optional(),
	updated_at: z.string().optional(),
	validfrom: z.string().optional(),
	validto: z.string().optional().nullable()
});

export const mPricelistVersionRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('m_pricelist_version_m_discountschema_id_fkey'),
		columns: z.tuple([z.literal('m_discountschema_id')]),
		referencedRelation: z.literal('m_discountschema'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_pricelist_version_m_pricelist_id_fkey'),
		columns: z.tuple([z.literal('m_pricelist_id')]),
		referencedRelation: z.literal('m_pricelist'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_pricelist_version_m_pricelist_version_base_id_fkey'),
		columns: z.tuple([z.literal('m_pricelist_version_base_id')]),
		referencedRelation: z.literal('m_pricelist_version'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const mProductRowSchema = z.object({
	attributeset_id: z.number().nullable(),
	c_taxcategory_id: z.number(),
	c_uom_id: z.number(),
	condition: z.string().nullable(),
	created_at: z.string(),
	description: z.string().nullable(),
	descriptionurl: z.string().nullable(),
	discontinued: z.boolean(),
	featuredAssetId: z.number().nullable(),
	id: z.number(),
	imageurl: z.string().nullable(),
	is_active: z.boolean(),
	is_self_service: z.boolean(),
	m_product_category_id: z.number().nullable(),
	m_product_uu: z.string().nullable(),
	mpn: z.string().nullable(),
	name: z.string(),
	net_qty_uom_id: z.number().nullable(),
	net_quantity: z.number(),
	producttype: z.string(),
	shelf_life: z.number().nullable(),
	sku: z.string().nullable(),
	unitsperpack: z.number(),
	updated_at: z.string()
});

export const mProductInsertSchema = z.object({
	attributeset_id: z.number().optional().nullable(),
	c_taxcategory_id: z.number().optional(),
	c_uom_id: z.number().optional(),
	condition: z.string().optional().nullable(),
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	descriptionurl: z.string().optional().nullable(),
	discontinued: z.boolean().optional(),
	featuredAssetId: z.number().optional().nullable(),
	id: z.number().optional(),
	imageurl: z.string().optional().nullable(),
	is_active: z.boolean().optional(),
	is_self_service: z.boolean().optional(),
	m_product_category_id: z.number().optional().nullable(),
	m_product_uu: z.string().optional().nullable(),
	mpn: z.string().optional().nullable(),
	name: z.string(),
	net_qty_uom_id: z.number().optional().nullable(),
	net_quantity: z.number().optional(),
	producttype: z.string().optional(),
	shelf_life: z.number().optional().nullable(),
	sku: z.string().optional().nullable(),
	unitsperpack: z.number().optional(),
	updated_at: z.string().optional()
});

export const mProductUpdateSchema = z.object({
	attributeset_id: z.number().optional().nullable(),
	c_taxcategory_id: z.number().optional(),
	c_uom_id: z.number().optional(),
	condition: z.string().optional().nullable(),
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	descriptionurl: z.string().optional().nullable(),
	discontinued: z.boolean().optional(),
	featuredAssetId: z.number().optional().nullable(),
	id: z.number().optional(),
	imageurl: z.string().optional().nullable(),
	is_active: z.boolean().optional(),
	is_self_service: z.boolean().optional(),
	m_product_category_id: z.number().optional().nullable(),
	m_product_uu: z.string().optional().nullable(),
	mpn: z.string().optional().nullable(),
	name: z.string().optional(),
	net_qty_uom_id: z.number().optional().nullable(),
	net_quantity: z.number().optional(),
	producttype: z.string().optional(),
	shelf_life: z.number().optional().nullable(),
	sku: z.string().optional().nullable(),
	unitsperpack: z.number().optional(),
	updated_at: z.string().optional()
});

export const mProductRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('m_product_attributeset_id_fkey'),
		columns: z.tuple([z.literal('attributeset_id')]),
		referencedRelation: z.literal('m_attributeset'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_product_c_taxcategory_id_fkey'),
		columns: z.tuple([z.literal('c_taxcategory_id')]),
		referencedRelation: z.literal('c_taxcategory'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_product_c_uom_id_fkey'),
		columns: z.tuple([z.literal('c_uom_id')]),
		referencedRelation: z.literal('c_uom'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_product_featuredAssetId_fkey'),
		columns: z.tuple([z.literal('featuredAssetId')]),
		referencedRelation: z.literal('asset'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_product_m_attributeset_id_fkey'),
		columns: z.tuple([z.literal('attributeset_id')]),
		referencedRelation: z.literal('m_attributeset'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_product_m_product_category_id_fkey'),
		columns: z.tuple([z.literal('m_product_category_id')]),
		referencedRelation: z.literal('m_product_category'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_product_net_qty_uom_id_fkey'),
		columns: z.tuple([z.literal('net_qty_uom_id')]),
		referencedRelation: z.literal('c_uom'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const mProductAttributeOptionRowSchema = z.object({
	attribute_id: z.number(),
	created_at: z.string().nullable(),
	id: z.number(),
	is_active: z.boolean().nullable(),
	option_id: z.number(),
	product_id: z.number(),
	updated_at: z.string().nullable()
});

export const mProductAttributeOptionInsertSchema = z.object({
	attribute_id: z.number(),
	created_at: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional().nullable(),
	option_id: z.number(),
	product_id: z.number(),
	updated_at: z.string().optional().nullable()
});

export const mProductAttributeOptionUpdateSchema = z.object({
	attribute_id: z.number().optional(),
	created_at: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional().nullable(),
	option_id: z.number().optional(),
	product_id: z.number().optional(),
	updated_at: z.string().optional().nullable()
});

export const mProductAttributeOptionRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('m_product_attribute_option_attribute_id_fkey'),
		columns: z.tuple([z.literal('attribute_id')]),
		referencedRelation: z.literal('m_attribute'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_product_attribute_option_option_id_fkey'),
		columns: z.tuple([z.literal('option_id')]),
		referencedRelation: z.literal('m_attribute_option'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_product_attribute_option_product_id_fkey'),
		columns: z.tuple([z.literal('product_id')]),
		referencedRelation: z.literal('m_product'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const mProductAttributeValueRowSchema = z.object({
	attribute_id: z.number(),
	boolean_value: z.boolean().nullable(),
	created_at: z.string().nullable(),
	date_value: z.string().nullable(),
	id: z.number(),
	is_active: z.boolean().nullable(),
	number_value: z.number().nullable(),
	product_id: z.number(),
	text_value: z.string().nullable(),
	updated_at: z.string().nullable()
});

export const mProductAttributeValueInsertSchema = z.object({
	attribute_id: z.number(),
	boolean_value: z.boolean().optional().nullable(),
	created_at: z.string().optional().nullable(),
	date_value: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional().nullable(),
	number_value: z.number().optional().nullable(),
	product_id: z.number(),
	text_value: z.string().optional().nullable(),
	updated_at: z.string().optional().nullable()
});

export const mProductAttributeValueUpdateSchema = z.object({
	attribute_id: z.number().optional(),
	boolean_value: z.boolean().optional().nullable(),
	created_at: z.string().optional().nullable(),
	date_value: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional().nullable(),
	number_value: z.number().optional().nullable(),
	product_id: z.number().optional(),
	text_value: z.string().optional().nullable(),
	updated_at: z.string().optional().nullable()
});

export const mProductAttributeValueRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('m_product_attribute_value_attribute_id_fkey'),
		columns: z.tuple([z.literal('attribute_id')]),
		referencedRelation: z.literal('m_attribute'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_product_attribute_value_product_id_fkey'),
		columns: z.tuple([z.literal('product_id')]),
		referencedRelation: z.literal('m_product'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const mProductCategoryRowSchema = z.object({
	created_at: z.string(),
	description: z.string().nullable(),
	id: z.number(),
	is_active: z.boolean(),
	is_self_service: z.boolean(),
	name: z.string(),
	parent_id: z.number().nullable(),
	updated_at: z.string()
});

export const mProductCategoryInsertSchema = z.object({
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	is_self_service: z.boolean().optional(),
	name: z.string(),
	parent_id: z.number().optional().nullable(),
	updated_at: z.string().optional()
});

export const mProductCategoryUpdateSchema = z.object({
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	is_self_service: z.boolean().optional(),
	name: z.string().optional(),
	parent_id: z.number().optional().nullable(),
	updated_at: z.string().optional()
});

export const mProductCategoryRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('m_product_category_parent_id_fkey'),
		columns: z.tuple([z.literal('parent_id')]),
		referencedRelation: z.literal('m_product_category'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const packingTypeSchema = z.union([
	z.literal('Individual'),
	z.literal('Pack'),
	z.literal('Pallet')
]);

export const mProductPackingInsertSchema = z.object({
	created_at: z.string().optional(),
	gtin: z.string().optional().nullable(),
	id: z.number().optional(),
	is_display: z.boolean().optional(),
	m_product_id: z.number(),
	packing_type: packingTypeSchema.optional(),
	unitsperpack: z.number().optional(),
	updated_at: z.string().optional()
});

export const mProductPackingUpdateSchema = z.object({
	created_at: z.string().optional(),
	gtin: z.string().optional().nullable(),
	id: z.number().optional(),
	is_display: z.boolean().optional(),
	m_product_id: z.number().optional(),
	packing_type: packingTypeSchema.optional(),
	unitsperpack: z.number().optional(),
	updated_at: z.string().optional()
});

export const mProductPackingRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('m_product_packing_m_product_id_fkey'),
		columns: z.tuple([z.literal('m_product_id')]),
		referencedRelation: z.literal('m_product'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const mProductPoRowSchema = z.object({
	barcode: z.string().nullable(),
	c_bpartner_id: z.number(),
	c_currency_id: z.number().nullable(),
	c_uom_id: z.number().nullable(),
	created_at: z.string(),
	discontinued: z.boolean().nullable(),
	id: z.number(),
	is_active: z.boolean(),
	iscurrentvendor: z.boolean(),
	m_product_id: z.number(),
	manufacturer: z.string().nullable(),
	pricelastinv: z.number().nullable(),
	pricelastpo: z.number().nullable(),
	pricelist: z.number(),
	pricepo: z.number().nullable(),
	updated_at: z.string(),
	url: z.string().nullable(),
	valid_from: z.string().nullable(),
	valid_to: z.string().nullable(),
	vendorcategory: z.string().nullable(),
	vendorproductno: z.string()
});

export const mProductPoInsertSchema = z.object({
	barcode: z.string().optional().nullable(),
	c_bpartner_id: z.number(),
	c_currency_id: z.number().optional().nullable(),
	c_uom_id: z.number().optional().nullable(),
	created_at: z.string().optional(),
	discontinued: z.boolean().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	iscurrentvendor: z.boolean().optional(),
	m_product_id: z.number(),
	manufacturer: z.string().optional().nullable(),
	pricelastinv: z.number().optional().nullable(),
	pricelastpo: z.number().optional().nullable(),
	pricelist: z.number().optional(),
	pricepo: z.number().optional().nullable(),
	updated_at: z.string().optional(),
	url: z.string().optional().nullable(),
	valid_from: z.string().optional().nullable(),
	valid_to: z.string().optional().nullable(),
	vendorcategory: z.string().optional().nullable(),
	vendorproductno: z.string()
});

export const mProductPoUpdateSchema = z.object({
	barcode: z.string().optional().nullable(),
	c_bpartner_id: z.number().optional(),
	c_currency_id: z.number().optional().nullable(),
	c_uom_id: z.number().optional().nullable(),
	created_at: z.string().optional(),
	discontinued: z.boolean().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	iscurrentvendor: z.boolean().optional(),
	m_product_id: z.number().optional(),
	manufacturer: z.string().optional().nullable(),
	pricelastinv: z.number().optional().nullable(),
	pricelastpo: z.number().optional().nullable(),
	pricelist: z.number().optional(),
	pricepo: z.number().optional().nullable(),
	updated_at: z.string().optional(),
	url: z.string().optional().nullable(),
	valid_from: z.string().optional().nullable(),
	valid_to: z.string().optional().nullable(),
	vendorcategory: z.string().optional().nullable(),
	vendorproductno: z.string().optional()
});

export const mProductPoRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('m_product_po_c_bpartner_id_fkey'),
		columns: z.tuple([z.literal('c_bpartner_id')]),
		referencedRelation: z.literal('c_bpartner'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_product_po_c_currency_id_fkey'),
		columns: z.tuple([z.literal('c_currency_id')]),
		referencedRelation: z.literal('c_currency'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_product_po_c_uom_id_fkey'),
		columns: z.tuple([z.literal('c_uom_id')]),
		referencedRelation: z.literal('c_uom'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_product_po_m_product_id_fkey'),
		columns: z.tuple([z.literal('m_product_id')]),
		referencedRelation: z.literal('m_product'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const mProductpriceRowSchema = z.object({
	created_at: z.string(),
	id: z.number(),
	is_active: z.boolean(),
	m_pricelist_version_id: z.number(),
	m_product_id: z.number(),
	pricelimit: z.number().nullable(),
	pricelist: z.number().nullable(),
	pricestd: z.number().nullable(),
	updated_at: z.string()
});

export const mProductpriceInsertSchema = z.object({
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	m_pricelist_version_id: z.number(),
	m_product_id: z.number(),
	pricelimit: z.number().optional().nullable(),
	pricelist: z.number().optional().nullable(),
	pricestd: z.number().optional().nullable(),
	updated_at: z.string().optional()
});

export const mProductpriceUpdateSchema = z.object({
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	m_pricelist_version_id: z.number().optional(),
	m_product_id: z.number().optional(),
	pricelimit: z.number().optional().nullable(),
	pricelist: z.number().optional().nullable(),
	pricestd: z.number().optional().nullable(),
	updated_at: z.string().optional()
});

export const mProductpriceRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('m_productprice_m_pricelist_version_id_fkey'),
		columns: z.tuple([z.literal('m_pricelist_version_id')]),
		referencedRelation: z.literal('m_pricelist_version'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_productprice_m_product_id_fkey'),
		columns: z.tuple([z.literal('m_product_id')]),
		referencedRelation: z.literal('m_product'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const mReplenishRowSchema = z.object({
	created_at: z.string(),
	id: z.number(),
	is_active: z.boolean(),
	level_max: z.number(),
	level_min: z.number(),
	m_locator_id: z.number().nullable(),
	m_product_id: z.number(),
	m_replenish_uu: z.string().nullable(),
	m_warehouse_id: z.number(),
	m_warehousesource_id: z.number().nullable(),
	qtybatchsize: z.number().nullable(),
	replenishtype: z.string(),
	updated_at: z.string()
});

export const mReplenishInsertSchema = z.object({
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	level_max: z.number().optional(),
	level_min: z.number().optional(),
	m_locator_id: z.number().optional().nullable(),
	m_product_id: z.number(),
	m_replenish_uu: z.string().optional().nullable(),
	m_warehouse_id: z.number(),
	m_warehousesource_id: z.number().optional().nullable(),
	qtybatchsize: z.number().optional().nullable(),
	replenishtype: z.string().optional(),
	updated_at: z.string().optional()
});

export const mReplenishUpdateSchema = z.object({
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	level_max: z.number().optional(),
	level_min: z.number().optional(),
	m_locator_id: z.number().optional().nullable(),
	m_product_id: z.number().optional(),
	m_replenish_uu: z.string().optional().nullable(),
	m_warehouse_id: z.number().optional(),
	m_warehousesource_id: z.number().optional().nullable(),
	qtybatchsize: z.number().optional().nullable(),
	replenishtype: z.string().optional(),
	updated_at: z.string().optional()
});

export const mReplenishRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('m_replenish_m_locator_id_fkey'),
		columns: z.tuple([z.literal('m_locator_id')]),
		referencedRelation: z.literal('m_locator'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_replenish_m_product_id_fkey'),
		columns: z.tuple([z.literal('m_product_id')]),
		referencedRelation: z.literal('m_product'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_replenish_m_warehouse_id_fkey'),
		columns: z.tuple([z.literal('m_warehouse_id')]),
		referencedRelation: z.literal('m_warehouse'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_replenish_m_warehousesource_id_fkey'),
		columns: z.tuple([z.literal('m_warehousesource_id')]),
		referencedRelation: z.literal('m_warehouse'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const mStorageonhandRowSchema = z.object({
	created_at: z.string(),
	id: z.number(),
	is_active: z.boolean().nullable(),
	m_locator_id: z.number().nullable(),
	m_product_id: z.number(),
	qtyonhand: z.number(),
	updated_at: z.string(),
	warehouse_id: z.number()
});

export const mStorageonhandInsertSchema = z.object({
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional().nullable(),
	m_locator_id: z.number().optional().nullable(),
	m_product_id: z.number(),
	qtyonhand: z.number(),
	updated_at: z.string().optional(),
	warehouse_id: z.number()
});

export const mStorageonhandUpdateSchema = z.object({
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional().nullable(),
	m_locator_id: z.number().optional().nullable(),
	m_product_id: z.number().optional(),
	qtyonhand: z.number().optional(),
	updated_at: z.string().optional(),
	warehouse_id: z.number().optional()
});

export const mStorageonhandRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('m_storageonhand_m_locator_id_fkey'),
		columns: z.tuple([z.literal('m_locator_id')]),
		referencedRelation: z.literal('m_locator'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_storageonhand_m_product_id_fkey'),
		columns: z.tuple([z.literal('m_product_id')]),
		referencedRelation: z.literal('m_product'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_storageonhand_warehouse_id_fkey'),
		columns: z.tuple([z.literal('warehouse_id')]),
		referencedRelation: z.literal('m_warehouse'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const mSubstituteRowSchema = z.object({
	created_at: z.string(),
	description: z.string().nullable(),
	is_active: z.boolean(),
	m_product_id: z.number(),
	name: z.string().nullable(),
	substitute_id: z.number(),
	updated_at: z.string()
});

export const mSubstituteInsertSchema = z.object({
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	is_active: z.boolean().optional(),
	m_product_id: z.number(),
	name: z.string().optional().nullable(),
	substitute_id: z.number(),
	updated_at: z.string().optional()
});

export const mSubstituteUpdateSchema = z.object({
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	is_active: z.boolean().optional(),
	m_product_id: z.number().optional(),
	name: z.string().optional().nullable(),
	substitute_id: z.number().optional(),
	updated_at: z.string().optional()
});

export const mSubstituteRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('m_substitute_m_product_id_fkey'),
		columns: z.tuple([z.literal('m_product_id')]),
		referencedRelation: z.literal('m_product'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('m_substitute_substitute_id_fkey'),
		columns: z.tuple([z.literal('substitute_id')]),
		referencedRelation: z.literal('m_product'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const mWarehouseRowSchema = z.object({
	code: z.string(),
	created_at: z.string(),
	id: z.number(),
	is_active: z.boolean(),
	is_self_service: z.boolean(),
	name: z.string(),
	updated_at: z.string()
});

export const mWarehouseInsertSchema = z.object({
	code: z.string(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	is_self_service: z.boolean().optional(),
	name: z.string(),
	updated_at: z.string().optional()
});

export const mWarehouseUpdateSchema = z.object({
	code: z.string().optional(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	is_self_service: z.boolean().optional(),
	name: z.string().optional(),
	updated_at: z.string().optional()
});

export const mWarehouseRelationshipsSchema = z.tuple([]);

export const wBasketRowSchema = z.object({
	ad_user_id: z.number(),
	c_bpartner_id: z.number().nullable(),
	created_at: z.string(),
	id: z.number(),
	is_active: z.boolean(),
	m_pricelist_id: z.number().nullable(),
	session_id: z.string().nullable(),
	updated_at: z.string(),
	w_basket_uu: z.string()
});

export const wBasketInsertSchema = z.object({
	ad_user_id: z.number(),
	c_bpartner_id: z.number().optional().nullable(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	m_pricelist_id: z.number().optional().nullable(),
	session_id: z.string().optional().nullable(),
	updated_at: z.string().optional(),
	w_basket_uu: z.string().optional()
});

export const wBasketUpdateSchema = z.object({
	ad_user_id: z.number().optional(),
	c_bpartner_id: z.number().optional().nullable(),
	created_at: z.string().optional(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	m_pricelist_id: z.number().optional().nullable(),
	session_id: z.string().optional().nullable(),
	updated_at: z.string().optional(),
	w_basket_uu: z.string().optional()
});

export const wBasketRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('w_basket_ad_user_id_fkey'),
		columns: z.tuple([z.literal('ad_user_id')]),
		referencedRelation: z.literal('ad_user'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('w_basket_c_bpartner_id_fkey'),
		columns: z.tuple([z.literal('c_bpartner_id')]),
		referencedRelation: z.literal('c_bpartner'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('w_basket_m_pricelist_id_fkey'),
		columns: z.tuple([z.literal('m_pricelist_id')]),
		referencedRelation: z.literal('m_pricelist'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const wBasketlineRowSchema = z.object({
	created_at: z.string(),
	description: z.string().nullable(),
	id: z.number(),
	is_active: z.boolean(),
	m_product_id: z.number().nullable(),
	price: z.number(),
	product: z.string().nullable(),
	qty: z.number(),
	updated_at: z.string(),
	w_basket_id: z.number()
});

export const wBasketlineInsertSchema = z.object({
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	m_product_id: z.number().optional().nullable(),
	price: z.number().optional(),
	product: z.string().optional().nullable(),
	qty: z.number().optional(),
	updated_at: z.string().optional(),
	w_basket_id: z.number()
});

export const wBasketlineUpdateSchema = z.object({
	created_at: z.string().optional(),
	description: z.string().optional().nullable(),
	id: z.number().optional(),
	is_active: z.boolean().optional(),
	m_product_id: z.number().optional().nullable(),
	price: z.number().optional(),
	product: z.string().optional().nullable(),
	qty: z.number().optional(),
	updated_at: z.string().optional(),
	w_basket_id: z.number().optional()
});

export const wBasketlineRelationshipsSchema = z.tuple([
	z.object({
		foreignKeyName: z.literal('w_basketline_m_product_id_fkey'),
		columns: z.tuple([z.literal('m_product_id')]),
		referencedRelation: z.literal('m_product'),
		referencedColumns: z.tuple([z.literal('id')])
	}),
	z.object({
		foreignKeyName: z.literal('w_basketline_w_basket_id_fkey'),
		columns: z.tuple([z.literal('w_basket_id')]),
		referencedRelation: z.literal('w_basket'),
		referencedColumns: z.tuple([z.literal('id')])
	})
]);

export const deleteAvatarReturnsSchema = z.record(z.unknown());

export const deleteStorageObjectReturnsSchema = z.record(z.unknown());

export const regionTypeSchema = z.union([
	z.literal('city'),
	z.literal('district'),
	z.literal('autonomous province')
]);

export const cChannelMapRowSchema = z.object({
	c_channel_id: z.number(),
	channel_code: z.string(),
	created_at: z.string(),
	entity_type: entitySchema,
	id: z.number(),
	internal_code: z.string(),
	is_active: z.boolean(),
	updated_at: z.string()
});

export const countriesRowSchema = z.object({
	continent: continentsSchema.nullable(),
	id: z.number(),
	iso2: z.string(),
	iso3: z.string().nullable(),
	local_name: z.string().nullable(),
	name: z.string().nullable()
});

export const mAttributeRowSchema = z.object({
	attribute_group_id: z.number(),
	attribute_type: attributeTypeSchema,
	code: z.string(),
	created_at: z.string(),
	description: z.string().nullable(),
	id: z.number(),
	is_active: z.boolean(),
	name: z.string(),
	updated_at: z.string()
});

export const mProductPackingRowSchema = z.object({
	created_at: z.string(),
	gtin: z.string().nullable(),
	id: z.number(),
	is_display: z.boolean(),
	m_product_id: z.number(),
	packing_type: packingTypeSchema,
	unitsperpack: z.number(),
	updated_at: z.string()
});
